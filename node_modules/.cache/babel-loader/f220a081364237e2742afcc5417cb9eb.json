{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSE-KMS\\\\Documents\\\\Temp\\\\frontend\\\\src\\\\pages\\\\main\\\\Start.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Box } from '@material-ui/core'; //Button\n\nimport useStores from '@stores/useStores';\nimport { useObserver } from 'mobx-react-lite';\nimport { withRouter } from 'react-router-dom';\nimport { GridView, LocalDataProvider } from 'realgrid';\nimport { columns, fields, rows } from './realgrid-data';\nimport axios from 'axios';\n\nvar Start = function Start() {\n  var _useStores = useStores(),\n      commonStore = _useStores.commonStore;\n\n  var _useObserver = useObserver(function () {\n    return {\n      $Dim: commonStore.Dim // $setAlert: commonStore.fSetAlert,\n      // $Confirm: commonStore.Confirm,\n      // $setConfirm: commonStore.fSetConfirm,\n      // $setConfirmFunc: commonStore.fSetConfirmFunc,\n\n    };\n  }),\n      $Dim = _useObserver.$Dim;\n\n  var Styles = fStyles($Dim);\n  var provider = useRef(null);\n  var gridView = useRef(null); //   const [format,setFormat]= useState(false); //값이 변경되었을 때 화면을 다시 그리기 위함\n\n  useEffect(function () {\n    console.log('여기')(gridView.current === null) && (provider.current = new LocalDataProvider());\n    gridView.current === null && (gridView.current = new GridView(\"realgrid\"));\n    gridView.current.setDataSource(provider.current);\n    provider.current.setFields(fields);\n    gridView.current.setColumns(columns);\n    gridView.current.setEditOptions({\n      insertable: true,\n      appendable: true,\n      updatable: true,\n      deletable: true,\n      //CRUD 하기 위한 작업들\n      softDeleting: true\n    });\n    provider.current.setRows(rows); // setFormat(false);\n    // console.log(\"여기 들옴\")\n    // gridView.current.cancel(); //수정하고 저장할때 오류를 막기 위함\n    // axios.get('/api/hansun') //테이블데이터 표현\n    // .then(res => {\n    //   console.log('함보자',res.data)\n    //   provider.current.setRows(res.data);\n    // });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Box, {\n    style: Styles.s1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      width: $Dim * 500,\n      height: $Dim * 200,\n      marginTop: $Dim * 20\n    },\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"realgrid\",\n    style: {\n      width: \"1600px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }))));\n};\n\nvar fStyles = function fStyles($Dim) {\n  return {\n    s1: {\n      width: $Dim * 1000,\n      height: $Dim * 550,\n      background: '#fff'\n    },\n    s2: {\n      width: $Dim * 500,\n      height: $Dim * 450\n    }\n  };\n};\n\nexport default withRouter(Start);","map":{"version":3,"sources":["C:\\Users\\HSE-KMS\\Documents\\Temp\\frontend\\src\\pages\\main\\Start.js"],"names":["React","useRef","useState","useEffect","Box","useStores","useObserver","withRouter","GridView","LocalDataProvider","columns","fields","rows","axios","Start","commonStore","$Dim","Dim","Styles","fStyles","provider","gridView","console","log","current","setDataSource","setFields","setColumns","setEditOptions","insertable","appendable","updatable","deletable","softDeleting","setRows","s1","width","height","marginTop","background","s2"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useEffect} from 'react';\r\nimport { Box } from '@material-ui/core'; //Button\r\nimport useStores from '@stores/useStores';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { GridView, LocalDataProvider } from 'realgrid';\r\nimport { columns, fields,rows } from './realgrid-data';\r\nimport axios from 'axios';\r\n\r\nconst Start = () => {\r\n\r\n\r\n\r\n    const { commonStore } = useStores();\r\n    const {$Dim} = useObserver(() => ({\r\n        $Dim: commonStore.Dim,\r\n        // $setAlert: commonStore.fSetAlert,\r\n        // $Confirm: commonStore.Confirm,\r\n        // $setConfirm: commonStore.fSetConfirm,\r\n        // $setConfirmFunc: commonStore.fSetConfirmFunc,\r\n      }));\r\n\r\n      const Styles = fStyles($Dim);\r\n\r\n\r\n      let provider = useRef(null);\r\n      let gridView = useRef(null);\r\n    //   const [format,setFormat]= useState(false); //값이 변경되었을 때 화면을 다시 그리기 위함\r\n    \r\n      useEffect(()=>{\r\n          console.log('여기')\r\n        (gridView.current === null) && (provider.current = new LocalDataProvider());\r\n        (gridView.current === null) && (gridView.current = new GridView(\"realgrid\"));\r\n        gridView.current.setDataSource(provider.current);\r\n        provider.current.setFields(fields); \r\n        gridView.current.setColumns(columns);\r\n        gridView.current.setEditOptions({\r\n          insertable: true,\r\n          appendable: true,\r\n          updatable: true,\r\n          deletable: true, //CRUD 하기 위한 작업들\r\n          softDeleting: true,\r\n        });\r\n        provider.current.setRows(rows);\r\n        // setFormat(false);\r\n        // console.log(\"여기 들옴\")\r\n        // gridView.current.cancel(); //수정하고 저장할때 오류를 막기 위함\r\n        // axios.get('/api/hansun') //테이블데이터 표현\r\n        // .then(res => {\r\n        //   console.log('함보자',res.data)\r\n        //   provider.current.setRows(res.data);\r\n        // });\r\n      },[])\r\n      \r\n\r\n    return (\r\n        <>  \r\n      <Box style={Styles.s1} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n        <Box style={{ width: $Dim * 500, height: $Dim * 200, marginTop: $Dim * 20 }} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n        <div id=\"realgrid\" style={{width: \"1600px\"}}></div>\r\n          {/* <Button variant=\"contained\" style={{ width: $Dim * 300, height: $Dim * 70, fontSize: $Dim * 25, backgroundColor: '#323232', color: '#ffffff' }}>\r\n            Alert\r\n          </Button>\r\n          <Button variant=\"contained\" style={{ width: $Dim * 300, height: $Dim * 70, marginTop: $Dim * 10, fontSize: $Dim * 25, backgroundColor: '#323232', color: '#ffffff' }}>\r\n            Confirm\r\n          </Button>\r\n          <Button variant=\"contained\" style={{ width: $Dim * 300, height: $Dim * 70, marginTop: $Dim * 10, fontSize: $Dim * 25, backgroundColor: '#323232', color: '#ffffff' }}>\r\n            DATA\r\n          </Button> */}\r\n        </Box>\r\n      </Box>\r\n        </> \r\n    );\r\n};\r\n\r\nconst fStyles = ($Dim) => {\r\n    return {\r\n      s1: { width: $Dim * 1000, height: $Dim * 550, background: '#fff' },\r\n      s2: { width: $Dim * 500, height: $Dim * 450 },\r\n    };\r\n  };\r\n\r\nexport default withRouter(Start);"]},"metadata":{},"sourceType":"module"}