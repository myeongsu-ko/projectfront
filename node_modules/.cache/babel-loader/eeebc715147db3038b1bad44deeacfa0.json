{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\HSE-KMS\\\\Documents\\\\Temp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\HSE-KMS\\\\Documents\\\\Temp\\\\frontend\\\\src\\\\pages\\\\main\\\\Start.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Box, Button } from '@material-ui/core'; //Button\n\nimport useStores from '@stores/useStores';\nimport { useObserver } from 'mobx-react-lite';\nimport { withRouter } from 'react-router-dom';\nimport { TreeView, LocalTreeDataProvider } from 'realgrid';\nimport { columns, fields, rows } from './realgrid-data';\nimport axios from 'axios';\nimport { sortedLastIndexOf } from 'lodash';\n\nvar Start = function Start() {\n  var _useStores = useStores(),\n      commonStore = _useStores.commonStore;\n\n  var _useObserver = useObserver(function () {\n    return {\n      $Dim: commonStore.Dim // $setAlert: commonStore.fSetAlert,\n      // $Confirm: commonStore.Confirm,\n      // $setConfirm: commonStore.fSetConfirm,\n      // $setConfirmFunc: commonStore.fSetConfirmFunc,\n\n    };\n  }),\n      $Dim = _useObserver.$Dim;\n\n  var Styles = fStyles($Dim);\n  var treeProvider = useRef(null);\n  var treeView = useRef(null); //   const [format,setFormat]= useState(false); //값이 변경되었을 때 화면을 다시 그리기 위함\n  //const [tables,setTables] =useState([]);\n\n  useEffect(function () {\n    treeView.current === null && (treeProvider.current = new LocalTreeDataProvider());\n    treeView.current === null && (treeView.current = new TreeView(\"realgrid\"));\n    treeView.current.setDataSource(treeProvider.current);\n    treeProvider.current.setFields(fields);\n    treeView.current.setColumns(columns);\n    treeView.current.setCheckBar({\n      visible: false\n    });\n    treeView.current.setEditOptions({\n      insertable: true,\n      appendable: true,\n      updatable: true,\n      deletable: true,\n      //CRUD 하기 위한 작업들\n      softDeleting: true\n    }); // setFormat(false);\n\n    console.log(\"여기 들옴\");\n    var table = [];\n    var row = [];\n    treeView.current.cancel(); //수정하고 저장할때 오류를 막기 위함\n\n    axios.get('/@/test/MinorByCount').then(function (res) {\n      table = _objectSpread({}, table, {\n        rows: res.data\n      });\n      console.log(table.rows)(table.rows).map(function (setting) {\n        axios.get('/@/test/selectByMinorList', {\n          params: {\n            Minor: setting.Minor\n          }\n        }).then(function (res) {\n          console.log('이거함 보자', res.data);\n        });\n      }); // treeProvider.current.setRows(res.data,'Minor',false);\n    }); // axios.get('/@/test/MinorByCount') //테이블데이터 표현\n    // .then(res => {\n    //   (res.data).map((setting)=>{\n    //     //console.log(setting.Minor)\n    //     axios.get('/@/test/selectByMinorList',{params:{Minor:setting.Minor}})\n    //     .then(res=>{\n    //       row = res.data\n    //       table = ({...setting, rows: row});\n    //       //console.log(table)\n    //       //setTables(tables.concat({...setting, rows: row}))\n    //       //onsole.log('보자보자',tables)\n    //       //treeProvider.current.setObjectRows(tables,'Minor',false);\n    //       console.log(table)\n    //     }) //then 끝\n    //     //console.log(tables)\n    //   })// map 끝\n    //  // console.log(tables)###\n    // //  treeProvider.current.setObjectRows(tables,{ tables:\"rows\" },false);\n    // }); //then 끝\n    // // console.log(table)\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Box, {\n    style: Styles.s1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      width: $Dim * 500,\n      height: $Dim * 200,\n      marginTop: $Dim * 20\n    },\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"realgrid\",\n    style: Styles.s2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"\\uC2E0\\uADDC\\uD56D\\uBAA9\"), React.createElement(Button, {\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"\\uCF54\\uB4DC\\uCD94\\uAC00\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"\\uC800\\uC7A5\"))))));\n};\n\nvar fStyles = function fStyles($Dim) {\n  return {\n    s1: {\n      width: $Dim * 1000,\n      height: $Dim * 550,\n      background: '#fff'\n    },\n    s2: {\n      width: $Dim * 500,\n      height: $Dim * 200,\n      marginTop: $Dim * 30\n    }\n  };\n};\n\nexport default withRouter(Start);","map":{"version":3,"sources":["C:\\Users\\HSE-KMS\\Documents\\Temp\\frontend\\src\\pages\\main\\Start.js"],"names":["React","useRef","useState","useEffect","Box","Button","useStores","useObserver","withRouter","TreeView","LocalTreeDataProvider","columns","fields","rows","axios","sortedLastIndexOf","Start","commonStore","$Dim","Dim","Styles","fStyles","treeProvider","treeView","current","setDataSource","setFields","setColumns","setCheckBar","visible","setEditOptions","insertable","appendable","updatable","deletable","softDeleting","console","log","table","row","cancel","get","then","res","data","map","setting","params","Minor","s1","width","height","marginTop","s2","display","justifyContent","background"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useEffect} from 'react';\r\nimport { Box,Button } from '@material-ui/core'; //Button\r\nimport useStores from '@stores/useStores';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TreeView, LocalTreeDataProvider } from 'realgrid';\r\nimport { columns, fields,rows } from './realgrid-data';\r\nimport axios from 'axios';\r\nimport { sortedLastIndexOf } from 'lodash';\r\n\r\nconst Start = () => {\r\n\r\n\r\n\r\n    const { commonStore } = useStores();\r\n    const {$Dim} = useObserver(() => ({\r\n        $Dim: commonStore.Dim,\r\n        // $setAlert: commonStore.fSetAlert,\r\n        // $Confirm: commonStore.Confirm,\r\n        // $setConfirm: commonStore.fSetConfirm,\r\n        // $setConfirmFunc: commonStore.fSetConfirmFunc,\r\n      }));\r\n\r\n      const Styles = fStyles($Dim);\r\n\r\n\r\n      let treeProvider  = useRef(null);\r\n      let treeView  = useRef(null);\r\n    //   const [format,setFormat]= useState(false); //값이 변경되었을 때 화면을 다시 그리기 위함\r\n      //const [tables,setTables] =useState([]);\r\n      useEffect(()=>{\r\n          \r\n        (treeView.current === null) && (treeProvider.current = new LocalTreeDataProvider());\r\n        (treeView.current === null) && (treeView.current = new TreeView(\"realgrid\"));\r\n        treeView.current.setDataSource(treeProvider.current);\r\n        treeProvider.current.setFields(fields); \r\n        treeView.current.setColumns(columns);\r\n        treeView.current.setCheckBar({\r\n            visible: false\r\n          });\r\n          treeView.current.setEditOptions({\r\n          insertable: true,\r\n          appendable: true,\r\n          updatable: true,\r\n          deletable: true, //CRUD 하기 위한 작업들\r\n          softDeleting: true,\r\n        });\r\n        // setFormat(false);\r\n        console.log(\"여기 들옴\")\r\n        let table = []\r\n        let row = []\r\n        treeView.current.cancel(); //수정하고 저장할때 오류를 막기 위함\r\n        axios.get('/@/test/MinorByCount')\r\n        .then(res =>{\r\n          table = {...table, rows: res.data}\r\n          console.log(table.rows)\r\n          (table.rows).map((setting)=>{\r\n            axios.get('/@/test/selectByMinorList',{\r\n              params : {Minor:setting.Minor}\r\n            })\r\n            .then(res =>{\r\n              console.log('이거함 보자',res.data)\r\n            })\r\n          })\r\n\r\n          // treeProvider.current.setRows(res.data,'Minor',false);\r\n        })\r\n\r\n\r\n        // axios.get('/@/test/MinorByCount') //테이블데이터 표현\r\n        // .then(res => {\r\n        //   (res.data).map((setting)=>{\r\n        //     //console.log(setting.Minor)\r\n        //     axios.get('/@/test/selectByMinorList',{params:{Minor:setting.Minor}})\r\n        //     .then(res=>{\r\n        //       row = res.data\r\n        //       table = ({...setting, rows: row});\r\n        //       //console.log(table)\r\n        //       //setTables(tables.concat({...setting, rows: row}))\r\n        //       //onsole.log('보자보자',tables)\r\n        //       //treeProvider.current.setObjectRows(tables,'Minor',false);\r\n        //       console.log(table)\r\n        //     }) //then 끝\r\n        //     //console.log(tables)\r\n        //   })// map 끝\r\n        //  // console.log(tables)###\r\n         \r\n        // //  treeProvider.current.setObjectRows(tables,{ tables:\"rows\" },false);\r\n        // }); //then 끝\r\n        // // console.log(table)\r\n      },[])\r\n      \r\n\r\n\r\n    return (\r\n        <>  \r\n      <Box style={Styles.s1} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n        <Box style={{ width: $Dim * 500, height: $Dim * 200, marginTop: $Dim * 20 }} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n        <button></button>\r\n        <div id=\"realgrid\" style={Styles.s2}></div>\r\n        <div style={{display:'flex'}}>\r\n        <div style={{justifyContent:'flex-start'}}>\r\n        <Button variant=\"contained\">신규항목</Button>\r\n        <Button variant=\"contained\">코드추가</Button>\r\n        </div>\r\n        <div>\r\n        <Button variant=\"contained\">저장</Button>\r\n        </div>\r\n        </div>\r\n        </Box>\r\n      </Box>\r\n        </> \r\n    );\r\n};\r\n\r\nconst fStyles = ($Dim) => {\r\n    return {\r\n      s1: { width: $Dim * 1000, height: $Dim * 550, background: '#fff' },\r\n      s2: { width: $Dim * 500, height: $Dim * 200, marginTop: $Dim * 30},\r\n    };\r\n  };\r\n\r\nexport default withRouter(Start);"]},"metadata":{},"sourceType":"module"}