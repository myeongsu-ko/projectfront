{"ast":null,"code":"/**\n * @name generate.js\n * @author Michaelangelo Jong\n */\n(function GeneratorScope() {\n  /**\n   * Assert Error function.\n   * @param  {Boolean} condition Whether or not to throw error.\n   * @param  {String} message    Error message.\n   */\n  function assertError(condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  }\n  /**\n   * Assert TypeError function.\n   * @param  {Boolean} condition Whether or not to throw error.\n   * @param  {String} message    Error message.\n   */\n\n\n  function assertTypeError(test, type) {\n    if (typeof test !== type) {\n      throw new TypeError('Expected \\'' + type + '\\' but instead found \\'' + typeof test + '\\'');\n    }\n  }\n  /**\n   * Returns the name of function 'func'.\n   * @param  {Function} func Any function.\n   * @return {String}        Name of 'func'.\n   */\n\n\n  function getFunctionName(func) {\n    if (func.name !== void 0) {\n      return func.name;\n    } // Else use IE Shim\n\n\n    var funcNameMatch = func.toString().match(/function\\s*([^\\s]*)\\s*\\(/);\n    func.name = funcNameMatch && funcNameMatch[1] || '';\n    return func.name;\n  }\n  /**\n   * Returns true if 'obj' is an object containing only get and set functions, false otherwise.\n   * @param  {Any} obj Value to be tested.\n   * @return {Boolean} true or false.\n   */\n\n\n  function isGetSet(obj) {\n    var keys, length;\n\n    if (obj && typeof obj === 'object') {\n      keys = Object.getOwnPropertyNames(obj).sort();\n      length = keys.length;\n\n      if (length === 1 && (keys[0] === 'get' && typeof obj.get === 'function' || keys[0] === 'set' && typeof obj.set === 'function') || length === 2 && keys[0] === 'get' && typeof obj.get === 'function' && keys[1] === 'set' && typeof obj.set === 'function') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Defines properties on 'obj'.\n   * @param  {Object} obj        An object that 'properties' will be attached to.\n   * @param  {Object} descriptor Optional object descriptor that will be applied to all attaching properties on 'properties'.\n   * @param  {Object} properties An object who's properties will be attached to 'obj'.\n   * @return {Generator}         'obj'.\n   */\n\n\n  function defineObjectProperties(obj, descriptor, properties) {\n    var setProperties = {},\n        i,\n        keys,\n        length,\n        p = properties || descriptor,\n        d = properties && descriptor;\n    properties = p && typeof p === 'object' ? p : {};\n    descriptor = d && typeof d === 'object' ? d : {};\n    keys = Object.getOwnPropertyNames(properties);\n    length = keys.length;\n\n    for (i = 0; i < length; i++) {\n      if (isGetSet(properties[keys[i]])) {\n        setProperties[keys[i]] = {\n          configurable: !!descriptor.configurable,\n          enumerable: !!descriptor.enumerable,\n          get: properties[keys[i]].get,\n          set: properties[keys[i]].set\n        };\n      } else {\n        setProperties[keys[i]] = {\n          configurable: !!descriptor.configurable,\n          enumerable: !!descriptor.enumerable,\n          writable: !!descriptor.writable,\n          value: properties[keys[i]]\n        };\n      }\n    }\n\n    Object.defineProperties(obj, setProperties);\n    return obj;\n  }\n\n  var Creation = {\n    /**\n     * Defines properties on this object.\n     * @param  {Object} descriptor Optional object descriptor that will be applied to all attaching properties.\n     * @param  {Object} properties An object who's properties will be attached to this object.\n     * @return {Object}            This object.\n     */\n    defineProperties: function defineProperties(descriptor, properties) {\n      defineObjectProperties(this, descriptor, properties);\n      return this;\n    },\n\n    /**\n     * returns the prototype of `this` Creation.\n     * @return {Object} Prototype of `this` Creation.\n     */\n    getProto: function getProto() {\n      return Object.getPrototypeOf(this);\n    },\n\n    /**\n     * returns the prototype of `this` super Creation.\n     * @return {Object} Prototype of `this` super Creation.\n     */\n    getSuper: function getSuper() {\n      return Object.getPrototypeOf(this.constructor.prototype);\n    }\n  };\n  var Generation = {\n    /**\n     * Returns true if 'generator' was generated by this Generator.\n     * @param  {Generator} generator A Generator.\n     * @return {Boolean}             true or false.\n     */\n    isGeneration: function isGeneration(generator) {\n      assertTypeError(generator, 'function');\n\n      var _ = this;\n\n      return _.prototype.isPrototypeOf(generator.prototype);\n    },\n\n    /**\n     * Returns true if 'object' was created by this Generator.\n     * @param  {Object} object An Object.\n     * @return {Boolean}       true or false.\n     */\n    isCreation: function isCreation(object) {\n      var _ = this;\n\n      return object instanceof _;\n    },\n\n    /**\n     * Generates a new generator that inherits from `this` generator.\n     * @param {Generator} ParentGenerator Generator to inherit from.\n     * @param {Function} create           Create method that gets called when creating a new instance of new generator.\n     * @return {Generator}                New Generator that inherits from 'ParentGenerator'.\n     */\n    generate: function generate(construct) {\n      assertTypeError(construct, 'function');\n\n      var _ = this;\n\n      defineObjectProperties(construct, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, {\n        prototype: Object.create(_.prototype)\n      });\n      defineObjectProperties(construct, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, Generation);\n      defineObjectProperties(construct.prototype, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, {\n        constructor: construct,\n        generator: construct\n      });\n      return construct;\n    },\n\n    /**\n     * Defines shared properties for all objects created by this generator.\n     * @param  {Object} descriptor Optional object descriptor that will be applied to all attaching properties.\n     * @param  {Object} properties An object who's properties will be attached to this generator's prototype.\n     * @return {Generator}         This generator.\n     */\n    definePrototype: function definePrototype(descriptor, properties) {\n      defineObjectProperties(this.prototype, descriptor, properties);\n      return this;\n    }\n  };\n\n  function Generator() {}\n\n  defineObjectProperties(Generator, {\n    configurable: false,\n    enumerable: false,\n    writable: false\n  }, {\n    prototype: Generator.prototype\n  });\n  defineObjectProperties(Generator.prototype, {\n    configurable: false,\n    enumerable: false,\n    writable: false\n  }, Creation);\n  defineObjectProperties(Generator, {\n    configurable: false,\n    enumerable: false,\n    writable: false\n  }, Generation);\n  defineObjectProperties(Generator, {\n    configurable: false,\n    enumerable: false,\n    writable: false\n  }, {\n    /**\n     * Returns true if 'generator' was generated by this Generator.\n     * @param  {Generator} generator A Generator.\n     * @return {Boolean}             true or false.\n     */\n    isGenerator: function isGenerator(generator) {\n      return this.isGeneration(generator);\n    },\n\n    /**\n     * Generates a new generator that inherits from `this` generator.\n     * @param {Generator} extendFrom      Constructor to inherit from.\n     * @param {Function} create           Create method that gets called when creating a new instance of new generator.\n     * @return {Generator}                New Generator that inherits from 'ParentGenerator'.\n     */\n    toGenerator: function toGenerator(extendFrom, create) {\n      console.warn('Generator.toGenerator is depreciated please use Generator.generateFrom');\n      return this.generateFrom(extendFrom, create);\n    },\n\n    /**\n     * Generates a new generator that inherits from `this` generator.\n     * @param {Constructor} extendFrom    Constructor to inherit from.\n     * @param {Function} create           Create method that gets called when creating a new instance of new generator.\n     * @return {Generator}                New Generator that inherits from 'ParentGenerator'.\n     */\n    generateFrom: function generateFrom(extendFrom, create) {\n      assertTypeError(extendFrom, 'function');\n      assertTypeError(create, 'function');\n      defineObjectProperties(create, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, {\n        prototype: Object.create(extendFrom.prototype)\n      });\n      defineObjectProperties(create, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, Generation);\n      defineObjectProperties(create.prototype, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, {\n        constructor: create,\n        generator: create\n      });\n      defineObjectProperties(create.prototype, {\n        configurable: false,\n        enumerable: false,\n        writable: false\n      }, Creation);\n      return create;\n    }\n  });\n  Object.freeze(Generator);\n  Object.freeze(Generator.prototype); // Exports\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(function () {\n      return Generator;\n    });\n  } else if (typeof module === 'object' && typeof exports === 'object') {\n    // Node/CommonJS\n    module.exports = Generator;\n  } else {\n    // Browser global\n    window.Generator = Generator;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}