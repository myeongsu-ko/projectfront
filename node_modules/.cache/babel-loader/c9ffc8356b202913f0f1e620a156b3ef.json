{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\nimport useStores from '@stores/useStores';\nimport { useObserver } from 'mobx-react-lite';\n\nvar Interceptor = function Interceptor() {\n  var _useStores = useStores(),\n      commonStore = _useStores.commonStore;\n\n  var _useObserver = useObserver(function () {\n    return {\n      $setLoading: commonStore.fSetLoading\n    };\n  }),\n      $setLoading = _useObserver.$setLoading;\n\n  useEffect(function () {\n    var loadState = false;\n    axios.defaults.headers.common['Cache-Control'] = 'no-cache';\n    axios.defaults.headers.common['Pragma'] = 'no-cache';\n    axios.defaults.headers.get['If-Modified-Since'] = '0';\n    axios.defaults.headers['Access-Control-Allow-Origin'] = '*';\n    axios.interceptors.request.use(function (config) {\n      loadState = true;\n      setTimeout(function () {\n        if (loadState) {\n          $setLoading(true);\n        }\n      }, 600);\n      return config;\n    }, function (error) {\n      loadState = true;\n      setTimeout(function () {\n        if (loadState) {\n          $setLoading(true);\n        }\n      }, 600);\n      return Promise.reject(error);\n    }); // 응답 인터셉터 추가\n\n    axios.interceptors.response.use(function (response) {\n      loadState = false;\n      $setLoading(false);\n      return response;\n    }, function (error) {\n      loadState = false;\n      $setLoading(false);\n      return Promise.reject(error);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default Interceptor;","map":{"version":3,"sources":["C:/Users/HSE-KMS/Documents/temp/frontend/src/components/common/Interceptor.js"],"names":["React","useEffect","axios","useStores","useObserver","Interceptor","commonStore","$setLoading","fSetLoading","loadState","defaults","headers","common","get","interceptors","request","use","config","setTimeout","error","Promise","reject","response"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,iBAA5B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,mBACAF,SAAS,EADT;AAAA,MAChBG,WADgB,cAChBA,WADgB;;AAAA,qBAEAF,WAAW,CAAC;AAAA,WAAO;AACzCG,MAAAA,WAAW,EAAED,WAAW,CAACE;AADgB,KAAP;AAAA,GAAD,CAFX;AAAA,MAEhBD,WAFgB,gBAEhBA,WAFgB;;AAMxBN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,SAAS,GAAG,KAAhB;AACAP,IAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,UAAjD;AACAV,IAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,QAA9B,IAA0C,UAA1C;AACAV,IAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBE,GAAvB,CAA2B,mBAA3B,IAAkD,GAAlD;AACAX,IAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuB,6BAAvB,IAAwD,GAAxD;AACAT,IAAAA,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAACC,MAAD,EAAY;AACVR,MAAAA,SAAS,GAAG,IAAZ;AACAS,MAAAA,UAAU,CAAC,YAAY;AACrB,YAAIT,SAAJ,EAAe;AACbF,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,OAJS,EAIP,GAJO,CAAV;AAKA,aAAOU,MAAP;AACD,KATH,EAUE,UAACE,KAAD,EAAW;AACTV,MAAAA,SAAS,GAAG,IAAZ;AACAS,MAAAA,UAAU,CAAC,YAAY;AACrB,YAAIT,SAAJ,EAAe;AACbF,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,OAJS,EAIP,GAJO,CAAV;AAKA,aAAOa,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KAlBH,EANc,CA2Bd;;AACAjB,IAAAA,KAAK,CAACY,YAAN,CAAmBQ,QAAnB,CAA4BN,GAA5B,CACE,UAACM,QAAD,EAAc;AACZb,MAAAA,SAAS,GAAG,KAAZ;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA,aAAOe,QAAP;AACD,KALH,EAME,UAACH,KAAD,EAAW;AACTV,MAAAA,SAAS,GAAG,KAAZ;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA,aAAOa,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KAVH;AAYD,GAxCQ,EAwCN,EAxCM,CAAT;AA0CA,sBAAO,yCAAP;AACD,CAjDD;;AAmDA,eAAed,WAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\nimport useStores from '@stores/useStores';\nimport { useObserver } from 'mobx-react-lite';\n\nconst Interceptor = () => {\n  const { commonStore } = useStores();\n  const { $setLoading } = useObserver(() => ({\n    $setLoading: commonStore.fSetLoading,\n  }));\n\n  useEffect(() => {\n    let loadState = false;\n    axios.defaults.headers.common['Cache-Control'] = 'no-cache';\n    axios.defaults.headers.common['Pragma'] = 'no-cache';\n    axios.defaults.headers.get['If-Modified-Since'] = '0';\n    axios.defaults.headers['Access-Control-Allow-Origin'] = '*';\n    axios.interceptors.request.use(\n      (config) => {\n        loadState = true;\n        setTimeout(function () {\n          if (loadState) {\n            $setLoading(true);\n          }\n        }, 600);\n        return config;\n      },\n      (error) => {\n        loadState = true;\n        setTimeout(function () {\n          if (loadState) {\n            $setLoading(true);\n          }\n        }, 600);\n        return Promise.reject(error);\n      },\n    );\n\n    // 응답 인터셉터 추가\n    axios.interceptors.response.use(\n      (response) => {\n        loadState = false;\n        $setLoading(false);\n        return response;\n      },\n      (error) => {\n        loadState = false;\n        $setLoading(false);\n        return Promise.reject(error);\n      },\n    );\n  }, []);\n\n  return <></>;\n};\n\nexport default Interceptor;\n"]},"metadata":{},"sourceType":"module"}