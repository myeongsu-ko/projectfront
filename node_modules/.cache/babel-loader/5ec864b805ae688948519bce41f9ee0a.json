{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\HSE-KMS\\\\Documents\\\\Temp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HSE-KMS\\\\Documents\\\\Temp\\\\frontend\\\\src\\\\components\\\\common\\\\Modal.js\";\nimport React, { useRef, useEffect } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useObserver } from 'mobx-react-lite';\nimport useStores from '@stores/useStores';\nimport { Box, Button } from '@material-ui/core';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  var top = 50 + rand();\n  var left = 50 + rand();\n  return {\n    top: \"\".concat(top, \"%\"),\n    left: \"\".concat(left, \"%\"),\n    transform: \"translate(-\".concat(top, \"%, -\").concat(left, \"%)\")\n  };\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3)\n    }\n  };\n});\n\nvar Modals = function Modals(_ref) {\n  var visible = _ref.visible,\n      description = _ref.description,\n      _ref$confirmText = _ref.confirmText,\n      confirmText = _ref$confirmText === void 0 ? '확인' : _ref$confirmText,\n      onConfirm = _ref.onConfirm;\n\n  var _useStores = useStores(),\n      commonStore = _useStores.commonStore;\n\n  var _useObserver = useObserver(function () {\n    return {\n      $Dim: commonStore.Dim\n    };\n  }),\n      $Dim = _useObserver.$Dim;\n\n  var Styles = fStyles($Dim);\n  var classes = useStyles(); // getModalStyle is not a pure function, we roll the style only on the first render\n\n  var _React$useState = React.useState(getModalStyle),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      modalStyle = _React$useState2[0];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      setOpen = _React$useState4[1];\n\n  var handleOpen = function handleOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var body = React.createElement(\"div\", {\n    style: modalStyle,\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"simple-modal-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Text in a modal\"), React.createElement(\"p\", {\n    id: \"simple-modal-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, description), React.createElement(Button, {\n    variant: \"contained\",\n    style: {\n      width: $Dim * 50,\n      height: $Dim * 20,\n      backgroundColor: '#348fe2',\n      fontSize: $Dim * 10,\n      color: '#ffffff'\n    },\n    onClick: onConfirm,\n    ref: btnRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, confirmText), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"\\uB2EB\\uAE30\"));\n  var btnRef = useRef(null);\n  useEffect(function () {\n    if (visible) {\n      btnRef.current.focus();\n    }\n  }, [visible]);\n  if (!visible) return null;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Open Modal\"), React.createElement(Modal, {\n    open: open,\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, body));\n};\n\nvar fStyles = function fStyles($Dim) {\n  return {\n    s1: {\n      width: $Dim * 1000,\n      height: $Dim * 550,\n      background: '#fff'\n    }\n  };\n};\n\nexport default Modals;","map":{"version":3,"sources":["C:\\Users\\HSE-KMS\\Documents\\Temp\\frontend\\src\\components\\common\\Modal.js"],"names":["React","useRef","useEffect","Modal","makeStyles","useObserver","useStores","Box","Button","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Modals","visible","description","confirmText","onConfirm","commonStore","$Dim","Dim","Styles","fStyles","classes","useState","modalStyle","open","setOpen","handleOpen","handleClose","body","height","fontSize","color","btnRef","current","focus","s1"],"mappings":"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","sourcesContent":["import React,{useRef,useEffect} from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport useStores from '@stores/useStores';\r\nimport { Box, Button } from '@material-ui/core';\r\n\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n  }\r\n  \r\n  function getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nconst Modals = ({ visible, description, confirmText = '확인', onConfirm }) => {\r\n    const { commonStore } = useStores();\r\n    const {$Dim} = useObserver(() => ({\r\n        $Dim: commonStore.Dim,\r\n      }));\r\n      const Styles = fStyles($Dim);\r\n\r\n\r\n\r\n    const classes = useStyles();\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\">Text in a modal</h2>\r\n      <p id=\"simple-modal-description\">\r\n        {description}\r\n      </p>\r\n      <Button variant=\"contained\" style={{ width: $Dim * 50, height: $Dim * 20, backgroundColor: '#348fe2', fontSize: $Dim * 10, color: '#ffffff' }} onClick={onConfirm} ref={btnRef}>\r\n                {confirmText}\r\n              </Button>\r\n              <button>닫기</button>\r\n      {/* <Modals /> */}\r\n    </div>\r\n  );\r\n\r\n\r\n  const btnRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      btnRef.current.focus();\r\n    }\r\n  }, [visible]);\r\n\r\n  if (!visible) return null;  \r\n\r\n\r\n    return (\r\n        <div>\r\n     <button type=\"button\" onClick={handleOpen}>\r\n        Open Modal\r\n      </button>\r\n      <Modal\r\n        open={open}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst fStyles = ($Dim) => {\r\n    return {\r\n      s1: { width: $Dim * 1000, height: $Dim * 550, background: '#fff' },\r\n    };\r\n  };\r\n\r\nexport default Modals;"]},"metadata":{},"sourceType":"module"}