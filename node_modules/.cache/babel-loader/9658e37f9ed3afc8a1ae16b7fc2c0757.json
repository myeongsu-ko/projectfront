{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSE-KMS\\\\Documents\\\\Temp\\\\frontend\\\\src\\\\pages\\\\main\\\\Start.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Box, Button } from '@material-ui/core'; //Button\n\nimport useStores from '@stores/useStores';\nimport { useObserver } from 'mobx-react-lite';\nimport { withRouter } from 'react-router-dom';\nimport { TreeView, LocalTreeDataProvider } from 'realgrid';\nimport { columns, fields, rows } from './realgrid-data';\nimport axios from 'axios';\n\nvar Start = function Start() {\n  var _useStores = useStores(),\n      commonStore = _useStores.commonStore;\n\n  var _useObserver = useObserver(function () {\n    return {\n      $Dim: commonStore.Dim // $setAlert: commonStore.fSetAlert,\n      // $Confirm: commonStore.Confirm,\n      // $setConfirm: commonStore.fSetConfirm,\n      // $setConfirmFunc: commonStore.fSetConfirmFunc,\n\n    };\n  }),\n      $Dim = _useObserver.$Dim;\n\n  var Styles = fStyles($Dim);\n  var treeProvider = useRef(null);\n  var treeView = useRef(null); //   const [format,setFormat]= useState(false); //값이 변경되었을 때 화면을 다시 그리기 위함\n\n  useEffect(function () {\n    treeView.current === null && (treeProvider.current = new LocalTreeDataProvider());\n    treeView.current === null && (treeView.current = new TreeView(\"realgrid\"));\n    treeView.current.setDataSource(treeProvider.current);\n    treeProvider.current.setFields(fields);\n    treeView.current.setColumns(columns);\n    treeView.current.setCheckBar({\n      visible: false\n    });\n    treeView.current.setEditOptions({\n      insertable: true,\n      appendable: true,\n      updatable: true,\n      deletable: true,\n      //CRUD 하기 위한 작업들\n      softDeleting: true\n    }); // provider.current.setRows(rows);\n    // setFormat(false);\n\n    console.log(\"여기 들옴\");\n    treeView.current.cancel(); //수정하고 저장할때 오류를 막기 위함\n\n    axios.get('/@/test/MinorList') //테이블데이터 표현\n    .then(function (res) {\n      // let list2 = [...res.data];\n      //     console.log(list2)\n      // let list3 = res.data\n      res.data.map(function (setting) {\n        console.log(setting.Minorcd.substring(-4, 3) + '.' + setting.Minorcd.substring(3));\n      });\n      console.log('함보자', res.data[1].Minorcd.substring(-4, 3) + '.' + res.data[1].Minorcd.substring(3)); //여기서 어떻게 해야됨 문자열자르기?\n\n      treeProvider.current.setRows(res.data, 'Minor', false);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Box, {\n    style: Styles.s1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      width: $Dim * 500,\n      height: $Dim * 200,\n      marginTop: $Dim * 20\n    },\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"realgrid\",\n    style: Styles.s2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }))));\n};\n\nvar fStyles = function fStyles($Dim) {\n  return {\n    s1: {\n      width: $Dim * 1000,\n      height: $Dim * 550,\n      background: '#fff'\n    },\n    s2: {\n      width: $Dim * 500,\n      height: $Dim * 200,\n      marginTop: $Dim * 30\n    }\n  };\n};\n\nexport default withRouter(Start);","map":{"version":3,"sources":["C:\\Users\\HSE-KMS\\Documents\\Temp\\frontend\\src\\pages\\main\\Start.js"],"names":["React","useRef","useState","useEffect","Box","Button","useStores","useObserver","withRouter","TreeView","LocalTreeDataProvider","columns","fields","rows","axios","Start","commonStore","$Dim","Dim","Styles","fStyles","treeProvider","treeView","current","setDataSource","setFields","setColumns","setCheckBar","visible","setEditOptions","insertable","appendable","updatable","deletable","softDeleting","console","log","cancel","get","then","res","data","map","setting","Minorcd","substring","setRows","s1","width","height","marginTop","s2","background"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useEffect} from 'react';\r\nimport { Box,Button } from '@material-ui/core'; //Button\r\nimport useStores from '@stores/useStores';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TreeView, LocalTreeDataProvider } from 'realgrid';\r\nimport { columns, fields,rows } from './realgrid-data';\r\nimport axios from 'axios';\r\n\r\nconst Start = () => {\r\n\r\n\r\n\r\n    const { commonStore } = useStores();\r\n    const {$Dim} = useObserver(() => ({\r\n        $Dim: commonStore.Dim,\r\n        // $setAlert: commonStore.fSetAlert,\r\n        // $Confirm: commonStore.Confirm,\r\n        // $setConfirm: commonStore.fSetConfirm,\r\n        // $setConfirmFunc: commonStore.fSetConfirmFunc,\r\n      }));\r\n\r\n      const Styles = fStyles($Dim);\r\n\r\n\r\n      let treeProvider  = useRef(null);\r\n      let treeView  = useRef(null);\r\n    //   const [format,setFormat]= useState(false); //값이 변경되었을 때 화면을 다시 그리기 위함\r\n    \r\n      useEffect(()=>{\r\n          \r\n        (treeView.current === null) && (treeProvider.current = new LocalTreeDataProvider());\r\n        (treeView.current === null) && (treeView.current = new TreeView(\"realgrid\"));\r\n        treeView.current.setDataSource(treeProvider.current);\r\n        treeProvider.current.setFields(fields); \r\n        treeView.current.setColumns(columns);\r\n        treeView.current.setCheckBar({\r\n            visible: false\r\n          });\r\n          treeView.current.setEditOptions({\r\n          insertable: true,\r\n          appendable: true,\r\n          updatable: true,\r\n          deletable: true, //CRUD 하기 위한 작업들\r\n          softDeleting: true,\r\n        });\r\n        // provider.current.setRows(rows);\r\n        // setFormat(false);\r\n        console.log(\"여기 들옴\")\r\n        treeView.current.cancel(); //수정하고 저장할때 오류를 막기 위함\r\n        axios.get('/@/test/MinorList') //테이블데이터 표현\r\n        .then(res => {\r\n\r\n            // let list2 = [...res.data];\r\n            //     console.log(list2)\r\n            // let list3 = res.data\r\n            (res.data).map((setting)=>{\r\n                console.log(setting.Minorcd.substring(-4,3)+'.'+setting.Minorcd.substring(3));\r\n            })\r\n          console.log('함보자',res.data[1].Minorcd.substring(-4,3)+'.'+res.data[1].Minorcd.substring(3)) //여기서 어떻게 해야됨 문자열자르기?\r\n          treeProvider.current.setRows(res.data,'Minor',false);\r\n        });\r\n      },[])\r\n      \r\n\r\n    return (\r\n        <>  \r\n      <Box style={Styles.s1} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n        <Box style={{ width: $Dim * 500, height: $Dim * 200, marginTop: $Dim * 20 }} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n        <button></button>\r\n        <div id=\"realgrid\" style={Styles.s2}></div>\r\n        </Box>\r\n      </Box>\r\n        </> \r\n    );\r\n};\r\n\r\nconst fStyles = ($Dim) => {\r\n    return {\r\n      s1: { width: $Dim * 1000, height: $Dim * 550, background: '#fff' },\r\n      s2: { width: $Dim * 500, height: $Dim * 200, marginTop: $Dim * 30},\r\n    };\r\n  };\r\n\r\nexport default withRouter(Start);"]},"metadata":{},"sourceType":"module"}